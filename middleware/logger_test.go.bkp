package middleware

import (
/*
		"bytes"
		"encoding/json"
		"fmt"
		"omega/internal/core"

		"io/ioutil"
		"net/http"
		"net/url"
		"omega/pkg/auth"
		"strings"

		"omega/internal/glog"

		"github.com/gin-gonic/gin"
	"testing"
*/
)

/*
func TestLogRequest(t *testing.T) {
	t.Log("This should be completed without relation with evns")
		_ = core.StartEngine()

		bbo := ioutil.NopCloser(strings.NewReader("{\"password\":\"k2i\",\"username\":\"diako\"}"))
		buf := new(bytes.Buffer)
		buf.ReadFrom(bbo)
		bbo.Close()

		u := url.URL{
			Path: "this is url",
		}

		authObj := auth.Auth{
			Username: "user1",
			Password: "pass1",
		}

		payloadBytes, err := json.Marshal(authObj)
		if err != nil {
			glog.Debug(err)
		}
		body := bytes.NewReader(payloadBytes)
		req, err := http.NewRequest("GET", "127.0.0.1/login", body)
		if err != nil {
			glog.Debug(err)
		}

		req.Header.Add("X-Forwarded-For", "127.0.0.1")

		r := http.Request{

			Method:     "post",
			RequestURI: "/url/good",
			URL:        &u,
		}

		c := gin.Context{
			Request: req,
		}

		requestIndex := uint(25)

		bodyResult := getBody(bbo)

		t.Log("This is logRequest test", fmt.Sprintf("%T :: %+[1]v", r), c, requestIndex, bbo)

}
*/
